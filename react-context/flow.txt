User can sign up
- When the app loads, the page gets rendered with the state isAuthorizing:true
  and user:null
- Once componentDidMount() runs for the first time, this.state.isAuthorizing is
  set to false which renders the page with the Auth React component where the
  user has the option to either sign-in or sign-up
- If the path chosen is to sign-up, the sign-up page is rendered
- Once user provides a new username and password then click 'Register', client's
  POST request is made to api/auth/sign-up where:
    - the server first checks to see if the request body contains both username
      and password (along with its values)
          - If not, a ClientError is thrown
          - If both username and password are provided:
            - the login info is stringified and saved in this.state
            - argon2 hashes the password, queries the database and returns the
              query result
            - takes the query's return value and inserts a new row in the users
              db with the provided username and hashedPassword
            - once the new user is successfully saved in the db, a 201 status is
              sent back to the client

User can sign in
- When the app loads, the page gets rendered with the state isAuthorizing:true
  and user:null
- Once componentDidMount() runs for the first time, this.state.isAuthorizing is
  set to false which renders the page with the Auth component where the user
  has the option to either sign-in or sign-up
- If the path chosen is to sign-in, the sign-in page is rendered
- Once user provides new username and password and click 'Log In':
    - the user's token gets stored in localStorage for future use
    - client's POST request is sent to api/auth/sign-in where:
      - the server checks to see if the request body contains both the username
        and password (along with its values)
        - If not, a ClientError is thrown
        - If both username and password are provided:
          - login info is stringified and saved in this.state
          - database gets queried to check if the username exists
            - if user does not exist, a 401 ClientError is thrown
            - if user does exist,
              - a new object is made containing the user's hashedPassword and
                provided password
              - argon2 verifies to see if the passwords match
                - if it does not match, a 401 ClientError is thrown
                - if it does match,
                    - then a new payload object is created containing the userId
                      and username properties
                    - a new signed token is created using the payload and the
                      TOKEN_SECRET
                    - a messae is sent to client containing a 200 response with
                      token and payload

User can stay signed in (even if they refresh the page)
- When the app loads, and this.state.isAuthorizing is still set to false from
  the user's previous visit, the page is rendered with the Navbar and PageContainer
  React components
- Then componentDidMount runs to check if user and token information is available
  in localStorage
- Token is indeed provided and the state isAuthorizing remains at false and and
  decodeToken method is run
- Since the state still retains this.state.user value, the route leads user to
  hash (the home page) which renders the Home React component

User can sign out
- From the home page, the user can click on the Sign Out button located on the
  navbar which invokes handleSignOut()
- Once this is called, the token is removed from localStorage and the user is
  once again set to null
- The page calls render() and since the user is now null, the AppContext signals
  Home component to call Redirect component to render the sign-in view
